{
  "type": "ts",
  "fileName": "state.ts",
  "filePath": "src/lib/utils/state.ts",
  "exports": [
    {
      "name": "state",
      "type": "typeof state",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * An advanced store factory with additional features:\n *\n * - Support for Maps, Sets, and Arrays (enabling methods like `.push` and `.add`). - A `.get` method for retrieving the current value of the store. - Optional `onChange` callback for adding side effects without subscribing. - Optional `key` argument for persisting the store to local storage.\n *\n * @param defaultValue - The default value of the store.\n *\n * @param options - {@link StateOptions}\n *\n * @example\n * ```svelte\n * <script lang=\"ts\">\n * \timport { state } from 'fractils'\n *\n * \tconst foo = state([1, 2, 3], { key: 'foo' }) // persisted to local storage\n * \tfoo.push(4)\n * \tfoo.push('5') // Type error\n *\n * \tconst bar = state(new Map<string, number>())\n * \tbar.setKey('count', 21) // `set` is taken, so we use `setKey` and `deleteKey`\n *\n * \tconst baz = state(new Set<number>())\n * \tbaz.add(5)\n * \tbaz.push(6) // Type error\n * </script>\n *\n * <h1>{$foo} {$bar} {$baz}</h1>\n * ```\n *\n */",
        "links": [
          {
            "target": "StateOptions",
            "text": "StateOptions"
          }
        ],
        "summary": "An advanced store factory with additional features:\n\n- Support for Maps, Sets, and Arrays (enabling methods like `.push` and `.add`).\n- A `.get` method for retrieving the current value of the store.\n- Optional `onChange` callback for adding side effects without subscribing.\n- Optional `key` argument for persisting the store to local storage.",
        "params": [
          {
            "name": "defaultValue",
            "description": "The default value of the store."
          },
          {
            "name": "options",
            "description": "{@linkStateOptions}"
          }
        ],
        "examples": [
          {
            "content": "```svelte\n<script lang=\"ts\">\n\timport { state } from 'fractils'\n\n\tconst foo = state([1, 2, 3], { key: 'foo' }) // persisted to local storage\n\tfoo.push(4)\n\tfoo.push('5') // Type error\n\n\tconst bar = state(new Map<string, number>())\n\tbar.setKey('count', 21) // `set` is taken, so we use `setKey` and `deleteKey`\n\n\tconst baz = state(new Set<number>())\n\tbaz.add(5)\n\tbaz.push(6) // Type error\n</script>\n\n<h1>{$foo} {$bar} {$baz}</h1>\n```"
          }
        ]
      }
    },
    {
      "name": "PrimitiveState",
      "type": "PrimitiveState<T>",
      "isDefaultExport": false
    },
    {
      "name": "State",
      "type": "State<T>",
      "isDefaultExport": false
    },
    {
      "name": "StateOptions",
      "type": "StateOptions<T>",
      "isDefaultExport": false
    }
  ]
}
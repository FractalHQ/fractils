{
  "type": "svelte",
  "fileName": "Code.svelte",
  "filePath": "src/lib/components/Code.svelte",
  "comment": {
    "raw": "/**\n * A styled code block with syntax highlighting. On the client, the code is highlighted using [Shikiji](https://github.com/antfu/shikiji) using the {@link highlight} util unless the `ssr` prop is set to true and the highlighted text is provided as the `highlightedText` prop. The raw `text` prop is still required in this case, as it's used for screen readers and the copy button.\n *\n * @example\n *\n * CSR\n *\n * A simple browser example:\n * ```svelte\n * <script>\n * import Code from 'fractils'\n *\n * \tconst text = `console.log('hello world')`\n * </script>\n *\n * <Code {text} />\n * ```\n *\n * @example\n *\n * SSR\n *\n * +page.svelte\n * ```svelte\n * <script>\n *    import Code from 'fractils'\n *\n *    export let data\n *    const { text, highlightedText } = data\n * </script>\n *\n * <Code ssr {text} {highlightedText} />\n * ```\n *\n * +page.ts\n * ```typescript\n * import { highlight } from 'fractils/utils/highlight'\n *\n * export async function load({ page, fetch }) {\n * const text = `console.log('hello world')`\n * const highlightedText = await highlight(text, { lang: 'js' })\n *\n * return {\n * \ttext,\n * \thighlightedText,\n * }\n * }\n * ```\n *\n */",
    "summary": "A styled code block with syntax highlighting.  On the client, the code ishighlighted using [Shikiji](https://github.com/antfu/shikiji) using the{@linkhighlight}util unless the`ssr`prop is set to true and the highlightedtext is provided as the`highlightedText`prop.  The raw`text`prop is stillrequired in this case, as it's used for screen readers and the copy button.",
    "examples": [
      {
        "name": "CSR",
        "content": " \n\nA simple browser example:\n\n```svelte\n<script>\nimport Code from 'fractils'\n\n\tconst text = `console.log('hello world')`\n</script>\n\n<Code {text} />\n```\n\n"
      },
      {
        "name": "SSR",
        "content": " \n\n+page.svelte\n```svelte\n<script>\n   import Code from 'fractils'\n\n   export let data\n   const { text, highlightedText } = data\n</script>\n\n<Code ssr {text} {highlightedText} />\n```\n\n+page.ts\n```typescript\nimport { highlight } from 'fractils/utils/highlight'\n\nexport async function load({ page, fetch }) {\nconst text = `console.log('hello world')`\nconst highlightedText = await highlight(text, { lang: 'js' })\n\nreturn {\n\ttext,\n\thighlightedText,\n}\n}\n```\n"
      }
    ]
  },
  "componentName": "Code",
  "props": [
    {
      "comment": {
        "raw": "/**\n * The string to highlight.\n */",
        "summary": "The string to highlight."
      },
      "name": "text",
      "type": "string"
    },
    {
      "comment": {
        "raw": "/**\n * Effectively just disables the client-side highlighting, assuming the text has already been highlighted on the server.\n *\n * @defaultValue\n *\n * false\n */",
        "summary": "Effectively just disables the client-side highlighting,assuming the text has already been highlighted on the server.",
        "defaultValue": "false"
      },
      "name": "ssr",
      "type": "boolean"
    },
    {
      "comment": {
        "raw": "/**\n * Optional pre-highlighted text. If this is provided _and_ the {@link ssr} prop is `true`, the highlighter will not be loaded / run on the client.\n */",
        "summary": "Optional pre-highlighted text.  If this is provided _and_ the{@linkssr}prop is`true`, the highlighter will not be loaded / run on the client."
      },
      "name": "highlightedText",
      "type": "string"
    },
    {
      "comment": {
        "raw": "/**\n * An optional title to display above the code block.\n *\n * @defaultValue\n *\n * 'code'\n */",
        "summary": "An optional title to display above the code block.",
        "defaultValue": "'code'"
      },
      "name": "title",
      "type": "string"
    },
    {
      "comment": {
        "raw": "/**\n * The language to use. Must be a {@link ValidLanguage}.\n *\n * @defaultValue\n *\n * 'json'\n */",
        "summary": "The language to use.  Must be a{@linkValidLanguage}.",
        "defaultValue": "'json'"
      },
      "name": "lang",
      "type": "Lang"
    },
    {
      "comment": {
        "raw": "/**\n * The theme to use.\n *\n * @defaultValue\n *\n * 'github'\n */",
        "summary": "The theme to use.",
        "defaultValue": "'github'"
      },
      "name": "theme",
      "type": "Theme"
    },
    {
      "comment": {
        "raw": "/**\n * If true, a button will be displayed to copy the code to the clipboard.\n *\n * @defaultValue\n *\n * true\n */",
        "summary": "If true, a button will be displayed to copy the code to the clipboard.",
        "defaultValue": "true"
      },
      "name": "copyButton",
      "type": "boolean"
    },
    {
      "comment": {
        "raw": "/**\n * If true, the code block will be collapsed by default.\n */",
        "summary": "If true, the code block will be collapsed by default."
      },
      "name": "collapsed",
      "type": "boolean"
    }
  ],
  "events": [],
  "slots": [],
  "exports": []
}
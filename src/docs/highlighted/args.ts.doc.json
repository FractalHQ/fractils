{
  "type": "ts",
  "fileName": "args.ts",
  "filePath": "src/lib/utils/args.ts",
  "exports": [
    {
      "name": "resolveArg",
      "type": "typeof resolveArg",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Get the value of a command line argument by name from an array of arguments.\n */",
        "summary": "<p>Get the value of a command line argument by name from an array of arguments.</p>\n"
      }
    },
    {
      "name": "mapArgs",
      "type": "typeof mapArgs",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Converts an array of args to a Map of key-value pairs. - Arguments starting with -- support spaces and `=` as a separator, e.g. `--name=John` or `--name John` - Arguments starting with - support k/v with spaces, e.g. `-n John` or boolean flags, e.g. `-n` - Arguments without a leading - or -- are treated as positional arguments and ignored.\n *\n * @param args - The array of arguments to convert.\n *\n * @param coerce - Whether to coerce numbers and booleans, or leave them as strings. Defaults to true.\n */",
        "summary": "<p>Converts an array of args to a Map of key-value pairs.</p>\n<ul>\n<li>Arguments starting with -- support spaces and <code>=</code> as a separator, e.g. <code>--name=John</code> or <code>--name John</code></li>\n<li>Arguments starting with - support k/v with spaces, e.g. <code>-n John</code> or boolean flags, e.g. <code>-n</code></li>\n<li>Arguments without a leading - or -- are treated as positional arguments and ignored.</li>\n</ul>\n",
        "params": [
          {
            "name": "args",
            "description": "The array of arguments to convert."
          },
          {
            "name": "coerce",
            "description": "Whether to coerce numbers and booleans, or leave them as strings.  Defaults to true."
          }
        ]
      }
    },
    {
      "name": "ArgMap",
      "type": "ArgMap",
      "isDefaultExport": false
    }
  ]
}
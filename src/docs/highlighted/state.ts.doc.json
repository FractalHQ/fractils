{
  "type": "ts",
  "fileName": "state.ts",
  "filePath": "src/lib/utils/state.ts",
  "exports": [
    {
      "name": "state",
      "type": "typeof state",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * An advanced store factory that adds support for Maps, Sets, and Arrays (enabling methods `.push` and `.add`), as well as a second argument for overriding the default store methods like `.set` and `.update`. It also adds a `.get` method for retrieving the current value of the store without subscribing to it.\n *\n * @remarks\n *\n * `state` boasts comprehensive type safety, leveraging conditional types and inference to provide the correct types and methods for the store based on the `defaultValue` argument (or the provided generic type).\n *\n * @param defaultValue - The default value of the store.\n *\n * @param options - Optional overrides for the default store methods.\n *\n * @example\n * ```svelte\n * <script lang=\"ts\">\n * \timport { state } from 'fractils'\n *\n * \tconst foo = state([1, 2, 3])\n * \tfoo.push(4)\n * \tfoo.push('5') // Type error\n *\n * \tconst bar = state(new Map<string, number>())\n * \tbar.setKey('count', 21) // note: `set` is taken, so we use `setKey` and `deleteKey`\n *\n * \tconst baz = state(new Set<number>())\n * \tbaz.add(5)\n *  baz.push(6) // Type error\n * </script>\n *\n * <h1>{$foo} {$bar} {$baz}</h1>\n * ```\n *\n */",
        "summary": "<p>An advanced store factory that adds support for Maps, Sets, and Arrays\n(enabling methods <code>.push</code> and <code>.add</code>), as well as a second argument for\noverriding the default store methods like <code>.set</code> and <code>.update</code>. It also\nadds a <code>.get</code> method for retrieving the current value of the store without\nsubscribing to it.</p>\n",
        "params": [
          {
            "name": "defaultValue",
            "description": "The default value of the store."
          },
          {
            "name": "options",
            "description": "Optional overrides for the default store methods."
          }
        ],
        "remarks": "`state`boasts comprehensive type safety, leveraging conditionaltypes and inference to provide the correct types and methods for the storebased on the`defaultValue`argument (or the provided generic type).",
        "examples": [
          {
            "content": "```svelte\n<script lang=\"ts\">\n\timport { state } from 'fractils'\n\n\tconst foo = state([1, 2, 3])\n\tfoo.push(4)\n\tfoo.push('5') // Type error\n\n\tconst bar = state(new Map<string, number>())\n\tbar.setKey('count', 21) // note: `set` is taken, so we use `setKey` and `deleteKey`\n\n\tconst baz = state(new Set<number>())\n\tbaz.add(5)\nbaz.push(6) // Type error\n</script>\n\n<h1>{$foo} {$bar} {$baz}</h1>\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#777D8F\">&#x3C;script</span><span style=\"color:#9CCFD8;font-style:italic\"> lang</span><span style=\"color:#777D8F\">=</span><span style=\"color:#A78BFA\">\"ts\"</span><span style=\"color:#777D8F\">></span></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    import </span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#DEE0EF\"> state</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#5BA2D0\"> from </span><span style=\"color:#A78BFA\">'fractils'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    const</span><span style=\"color:#DEE0EF\"> foo</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#F8D2C9\"> state</span><span style=\"color:#DEE0EF\">([</span><span style=\"color:#F8D2C9\">1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#F8D2C9\"> 2</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#F8D2C9\"> 3</span><span style=\"color:#DEE0EF\">])</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">    foo</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">push</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#F8D2C9\">4</span><span style=\"color:#DEE0EF\">)</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">    foo</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">push</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#A78BFA\">'5'</span><span style=\"color:#DEE0EF\">)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> Type error</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    const</span><span style=\"color:#DEE0EF\"> bar</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#F8D2C9\"> state</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#5BA2D0\">new</span><span style=\"color:#F8D2C9\"> Map</span><span style=\"color:#8D8F9E\">&#x3C;</span><span style=\"color:#F8D2C9\">string</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#F8D2C9\"> number</span><span style=\"color:#8D8F9E\">></span><span style=\"color:#DEE0EF\">())</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">    bar</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">setKey</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#A78BFA\">'count'</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#F8D2C9\"> 21</span><span style=\"color:#DEE0EF\">)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> note: `set` is taken, so we use `setKey` and `deleteKey`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    const</span><span style=\"color:#DEE0EF\"> baz</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#F8D2C9\"> state</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#5BA2D0\">new</span><span style=\"color:#F8D2C9\"> Set</span><span style=\"color:#8D8F9E\">&#x3C;</span><span style=\"color:#F8D2C9\">number</span><span style=\"color:#8D8F9E\">></span><span style=\"color:#DEE0EF\">())</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">    baz</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">add</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#F8D2C9\">5</span><span style=\"color:#DEE0EF\">)</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">baz</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">push</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#F8D2C9\">6</span><span style=\"color:#DEE0EF\">)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> Type error</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;/script></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;h1></span><span style=\"color:#8D8F9E\">{$</span><span style=\"color:#DEE0EF\">foo</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#8D8F9E\"> {$</span><span style=\"color:#DEE0EF\">bar</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#8D8F9E\"> {$</span><span style=\"color:#DEE0EF\">baz</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#777D8F\">&#x3C;/h1></span></span></code></pre>",
                "lang": "svelte",
                "raw": "<script lang=\"ts\">\n    import { state } from 'fractils'\n\n    const foo = state([1, 2, 3])\n    foo.push(4)\n    foo.push('5') // Type error\n\n    const bar = state(new Map<string, number>())\n    bar.setKey('count', 21) // note: `set` is taken, so we use `setKey` and `deleteKey`\n\n    const baz = state(new Set<number>())\n    baz.add(5)\nbaz.push(6) // Type error\n</script>\n\n<h1>{$foo} {$bar} {$baz}</h1>",
                "title": ""
              }
            ]
          }
        ]
      }
    },
    {
      "name": "State",
      "type": "State<T>",
      "isDefaultExport": false
    }
  ]
}